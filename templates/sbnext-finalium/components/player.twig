         <div id="container" style="margin:0;">
            <!--- todo: redo "video processed" message to use _error.twig -gr 7/22/2021 --->
            {% if (video.flags b-and 2) %}
            <div style="background-color:black;color:white;aspect-ratio: 16 / 9;width: 100%;">
               {{ __("This video is being processed. Try again later.") }}
            </div>
            {% else %}
			<div data-shaka-player-container style="aspect-ratio: 16 / 9;width: 100%;background-color:black;" data-shaka-player-cast-receiver-id="BBED8D28">
				<video style="aspect-ratio: 16 / 9;width: 100%;background-color:black;" id="video" data-shaka-player crossorigin playsinline poster="{{ video_thumbnail(video.video_id) }}">
				</video>
			</div>
            {% endif %}
         </div>
         <script src="https://cdn.jsdelivr.net/npm/shaka-player@3.1.6/dist/shaka-player.compiled.min.js"></script>
         <script src="https://cdn.jsdelivr.net/npm/shaka-player@3.1.6/dist/shaka-player.ui.min.js"></script>
		 <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/shaka-player@3.1.6/dist/controls.css">
         <!-- indigo player (the player we used back in the milestone/alpha days) was starting to have a lot of techincal issues by the time of alpha 3.
            videos would randomly glitch on indigo and sometimes it wouldn't even load the goddamn video (not a ffmpeg issue this time).
            we at squarebracket have decided to use plyr instead of indigo. the aspect ratio is a bit wonky but that should be fixed soon
            -gamerappa, July 31st 2021 -->
         <style>
			.shaka-language-button {
				display: none !important;
			}
		 
			//todo: port this
            .plyr--video {
            --plyr-color-main: #1b8ade;
            --plyr-font-family: arial, helvetica, sans-serif;
            --plyr-control-spacing: 10px;
            }
            .plyr--video .plyr__controls {
            padding: 1px 3px !important;
            background: var(--plyr-video-controls-background,linear-gradient(#292929,#0B0B0B));
            }
            .plyr__control svg {
            fill: #656565;
            }
            .plyr__control svg:hover {
            fill: #CDCDCD;
            }
            .plyr--video .plyr__control.plyr__tab-focus, .plyr--video .plyr__control:hover, .plyr--video .plyr__control[aria-expanded="true"] {
            background: #FFFFFF11;
            color: var(--plyr-video-control-color-hover,#fff);
            }
            .plyr__control--overlaid {
            background: #fff;
            }
            .plyr__controls .plyr__controls__item:first-child {
            margin-left: 0;
            margin-right: auto;
            padding: 6px 19px;
            }
			.plyr--full-ui input[type="range"]::-moz-range-progress {
			  background: linear-gradient(#1d89dc,#1a78c1);
			}
			.plyr__tooltip {
			background: var(--plyr-tooltip-background,hsla(0, 0%, 7.5%, 0.9));
			color: var(--plyr-tooltip-color,#fff);
			}
			.plyr__tooltip::before {
			border-top: var(--plyr-tooltip-arrow-size,4px) solid var(--plyr-tooltip-background,hsla(0, 0%, 7.5%, 0.9));
			}
			.plyr__menu__container {
			background: var(--plyr-menu-background,hsla(0, 0%, 7.5%, 0.9));
			}
			.plyr__menu__container::after {
			border-top: var(--plyr-menu-arrow-size,4px) solid hsla(0, 0%, 7.5%, 0.9);
			}
			.plyr__menu__container .plyr__control {
			  color: var(--plyr-menu-color,#cbcbcb);
			}
         </style>
         <script>
            {% if not (video.flags b-and 2) %}
				const manifestUri =
					'./videos/{{ video.video_id }}.mpd';

				async function init() {
				  // When using the UI, the player is made automatically by the UI object.
				  const video = document.getElementById('video');
				  const ui = video['ui'];
				  const controls = ui.getControls();
				  const player = controls.getPlayer();

				  // Attach player and ui to the window to make it easy to access in the JS console.
				  window.player = player;
				  window.ui = ui;

				  // Listen for error events.
				  player.addEventListener('error', onPlayerErrorEvent);
				  controls.addEventListener('error', onUIErrorEvent);

				  // Try to load a manifest.
				  // This is an asynchronous process.
				  try {
					await player.load(manifestUri);
					// This runs if the asynchronous load is successful.
					console.log('The video has now been loaded!');
				  } catch (error) {
					onPlayerError(error);
				  }
				}

				function onPlayerErrorEvent(errorEvent) {
				  // Extract the shaka.util.Error object from the event.
				  onPlayerError(event.detail);
				}

				function onPlayerError(error) {
				  // Handle player error
				  console.error('Error code', error.code, 'object', error);
				}

				function onUIErrorEvent(errorEvent) {
				  // Extract the shaka.util.Error object from the event.
				  onPlayerError(event.detail);
				}

				function initFailed(errorEvent) {
				  // Handle the failure to load; errorEvent.detail.reasonCode has a
				  // shaka.ui.FailReasonCode describing why.
				  console.error('Unable to load the UI library!');
				}

				// Listen to the custom shaka-ui-loaded event, to wait until the UI is loaded.
				document.addEventListener('shaka-ui-loaded', init);
				// Listen to the custom shaka-ui-load-failed event, in case Shaka Player fails
				// to load (e.g. due to lack of browser support).
				document.addEventListener('shaka-ui-load-failed', initFailed);
            {% endif %}
         </script>